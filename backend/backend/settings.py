"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from google import genai
import os
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9mm3xuea!fl()8klj#*$_s2#f8mn!h-b!(c=gyn09m8c6he*i!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Hosts/domain names that are valid for this site
ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',                # Admin site
    'django.contrib.auth',                 # Authentication framework
    'django.contrib.contenttypes',         # Content type system
    'django.contrib.sessions',             # Session framework
    'django.contrib.messages',             # Messaging framework
    'django.contrib.staticfiles',          # Static file management
    'rest_framework',                      # Django REST framework
    'crop',                                # Custom crop app
    'chat',                                # Custom chat app
    'corsheaders',                         # CORS headers for cross-origin requests
    'consultants',                         # Custom consultants app
    'rest_framework.authtoken'             # Token authentication for DRF
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',           # Security enhancements
    'django.contrib.sessions.middleware.SessionMiddleware',    # Session management
    'django.middleware.common.CommonMiddleware',               # Common HTTP features
    'django.middleware.csrf.CsrfViewMiddleware',               # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Authentication
    'django.contrib.messages.middleware.MessageMiddleware',    # Messaging
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
    'corsheaders.middleware.CorsMiddleware',                   # CORS middleware
    'django.middleware.common.CommonMiddleware',               # Duplicate, but harmless
]

# Root URL configuration
ROOT_URLCONF = 'backend.urls'

# Template settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # List of directories to search for templates
        'APP_DIRS': True,  # Look for templates inside installed apps
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # Add request object to context
                'django.contrib.auth.context_processors.auth', # Add user object to context
                'django.contrib.messages.context_processors.messages', # Add messages to context
            ],
        },
    },
]

# WSGI application entry point
WSGI_APPLICATION = 'backend.wsgi.application'

# Database configuration using environment variables for security
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),  
        'NAME': os.getenv('DB_NAME'),                     
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'), 
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation settings
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type for models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Initialize Google Gemini AI client with API key from environment
client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# CORS settings: allow requests from frontend running on localhost:5173
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

# API keys for external services
OPENWEATHER_API_KEY = 'b58882e56137707ffa9e46f81614302a'
NEWSDATA_API_KEY = 'pub_876386bb80b0aa0bc720184d47290a9c17d77'
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
